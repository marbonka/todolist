<?php
declare(strict_types=1);

namespace Addonsys\ToDoList\Command;

use Addonsys\ToDoList\Api\TaskRepositoryInterface;
use Magento\Framework\Api\FilterBuilder;
use Magento\Framework\Api\Search\SearchCriteriaBuilder;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Helper\Table;
use Symfony\Component\Console\Helper\TableCell;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Magento\Framework\Console\Cli;

class ListTasksCommand extends Command
{
    const NAME = "addonsys:todolist:task-list";

    /**
     * @var TaskRepositoryInterface
     */
    private $taskRepository;

    /**
     * @var SearchCriteriaBuilder
     */
    private $searchCriteriaBuilder;

    /**
     * @var FilterBuilder
     */
    private $filterBuilder;

    public function __construct(
        TaskRepositoryInterface $taskRepository,
        SearchCriteriaBuilder   $searchCriteriaBuilder,
        FilterBuilder           $filterBuilder,
        string                  $name = null
    )
    {
        $this->taskRepository = $taskRepository;
        $this->searchCriteriaBuilder = $searchCriteriaBuilder;
        $this->filterBuilder = $filterBuilder;
        parent::__construct($name);
    }

    protected function configure()
    {
        $this
            ->setName(self::NAME)
            ->setDescription(
                "Provides a list of tasks"
            )
            ->addOption(
                'customer_id',
                'c',
                InputOption::VALUE_OPTIONAL,
                "Filter tasks by customer"
            );
        parent::configure(); // TODO: Change the autogenerated stub
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $customerId = (int)$input->getOption('customer_id');
        $output->writeln('Customer ID: ' . $customerId);
        if (!empty($customerId)) {
            $this->searchCriteriaBuilder->addFilter(
                $this->filterBuilder->create()
                    ->setField('customer_id')
                    ->setValue($customerId)
            );
        }
        $taskSearchResult = $this->taskRepository->getList($this->searchCriteriaBuilder->create());
        $table = new Table($output);
        $table->setHeaders(["ID", "Label", "Status", "Customer ID"]);
        $tasks = $taskSearchResult->getItems();
        if (empty($tasks)) {
            $rows[] = [new TableCell('There are no tasks for the customer', ['colspan' => 4])];
        } else {
            $rows = [];
            foreach ($tasks as $task) {
                $rows[] = [
                    $task->getTaskId(), $task->getLabel(), $task->getStatus(), $task->getData('customer_id')
                ];
            }
        }
        $table->setRows($rows);
        $table->setStyle('box-double');
        $table->render();
        return Cli::RETURN_SUCCESS;
    }
}
